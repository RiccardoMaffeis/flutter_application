import 'package:firebase_auth/firebase_auth.dart' as fb;
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';

import 'core/theme/app_theme.dart';
import 'app_router.dart';
import 'firebase_options.dart';

/// Entry point of the application.
/// Ensures Flutter bindings are initialized, sets up Firebase,
/// then boots the app wrapped in a Riverpod [ProviderScope].
Future<void> main() async {
  // Required when using platform channels or awaiting async work before runApp.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the platform-specific options generated by FlutterFire CLI.
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Helpful debug log to confirm the Firebase project in use at runtime.
  final opts = fb.FirebaseAuth.instance.app.options;
  debugPrint('FIREBASE projectId=${opts.projectId}, apiKey=${opts.apiKey}');

  // Expose Riverpod providers to the widget tree.
  runApp(const ProviderScope(child: MyApp()));
}

/// Root widget of the application.
/// Provides theming and router configuration (GoRouter) via MaterialApp.router.
class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Watch the router provider so navigation updates reactively on auth changes.
    final router = ref.watch(routerProvider);

    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      title: 'Welcome/Auth Demo',
      // Centralized light theme for the app.
      theme: AppTheme.light,
      // GoRouter configuration that handles routing and redirects.
      routerConfig: router,
    );
  }
}
